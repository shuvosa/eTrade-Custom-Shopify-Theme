<div class="product-recommendations" data-product-id="{{ product.id }}" data-recommendations-url="{{ routes.product_recommendations_url }}">
  {%- if recommendations.performed -%}
    {%- if recommendations.products_count > 0 -%}
      <div class="container mx-auto px-4 py-16">
        <div class="text-center mb-12">
          <h2 class="text-3xl font-bold text-gray-900 mb-4">Complete Your Collection</h2>
          <p class="text-gray-600 max-w-2xl mx-auto">Customers who purchased this item also viewed these premium selections</p>
        </div>
        <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6 xl:gap-8">
          {%- for product in recommendations.products -%}
            {% render 'product-card', product: product %}
          {%- endfor -%}
        </div>
      </div>
    {%- else -%}
      <!-- Fallback: Show best sellers -->
      <div class="container mx-auto px-4 py-16">
        <div class="text-center mb-12">
          <h2 class="text-3xl font-bold text-gray-900 mb-4">Trending Now</h2>
          <p class="text-gray-600 max-w-2xl mx-auto">Explore our most popular products this season</p>
        </div>
        <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6 xl:gap-8">
          {%- assign best_selling_products = collections.all.products | sort: 'best-selling' -%}
          {%- for product in best_selling_products limit: 4 -%}
            {% render 'product-card', product: product %}
          {%- endfor -%}
        </div>
      </div>
    {%- endif -%}
  {%- else -%}
    <div class="container mx-auto px-4 py-16">
      <div class="text-center mb-12">
        <h2 class="text-3xl font-bold text-gray-900 mb-4">Loading Recommendations...</h2>
        <div class="animate-pulse flex justify-center space-x-2">
          <div class="w-3 h-3 bg-gray-300 rounded-full"></div>
          <div class="w-3 h-3 bg-gray-300 rounded-full"></div>
          <div class="w-3 h-3 bg-gray-300 rounded-full"></div>
        </div>
      </div>
      <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6 xl:gap-8">
        {%- for i in (1..4) -%}
          <div class="card-skeleton bg-white rounded-xl shadow-sm overflow-hidden">
            <div class="aspect-square bg-gray-100 animate-pulse"></div>
            <div class="p-4">
              <div class="h-4 bg-gray-100 rounded mb-2 w-3/4 animate-pulse"></div>
              <div class="h-4 bg-gray-100 rounded mb-3 w-1/2 animate-pulse"></div>
              <div class="h-6 bg-gray-100 rounded w-1/3 animate-pulse"></div>
            </div>
          </div>
        {%- endfor -%}
      </div>
    </div>
    <script>
      // Enhanced fetch with loading states
       const initRecommendations = () => {
    const container = document.querySelector('.product-recommendations');
    if (!container) return;

    const productId = container.dataset.productId;
    const recommendationsUrl = container.dataset.recommendationsUrl; // Get URL from data attribute

    // Immediately fetch recommendations
    fetch(`${recommendationsUrl}?section_id=product-recommendations&product_id=${productId}`)
      .then(response => response.text())
      .then(text => {
        const parser = new DOMParser();
        const html = parser.parseFromString(text, 'text/html');
        const newContent = html.querySelector('.product-recommendations').innerHTML;
        container.innerHTML = newContent;
        initProductCardHovers();
      })
      .catch(error => {
        console.error('Error loading recommendations:', error);
        container.querySelector('.card-skeleton').innerHTML = `
          <div class="text-center py-12">
            <p class="text-gray-500">Failed to load recommendations. Please refresh the page.</p>
          </div>
        `;
      });
  };

      // Product card hover interactions
      const initProductCardHovers = () => {
        document.querySelectorAll('.product-card').forEach(card => {
          const img = card.querySelector('img');
          if (img) {
            card.addEventListener('mouseenter', () => {
              img.style.transform = 'scale(1.05)';
            });
            card.addEventListener('mouseleave', () => {
              img.style.transform = 'scale(1)';
            });
          }
        });
      };

      document.addEventListener('DOMContentLoaded', initRecommendations);
    </script>
  {%- endif -%}
</div>

<style>
  .product-recommendations {
    background: linear-gradient(to bottom, #f8fafc 0%, #ffffff 100%);
  }

  .card-skeleton {
    animation: shimmer 1.5s infinite linear;
    background: linear-gradient(
      to right,
      rgba(255,255,255,0) 0%,
      rgba(255,255,255,0.8) 50%,
      rgba(255,255,255,0) 100%
    );
    background-size: 200% 100%;
  }

  @keyframes shimmer {
    0% { background-position: 200% 0; }
    100% { background-position: -200% 0; }
  }

  .product-card img {
    transition: transform 0.3s ease-in-out, opacity 0.3s ease;
  }
</style>